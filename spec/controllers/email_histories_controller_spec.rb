require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EmailHistoriesController do

  def mock_email_history(stubs={})
    @mock_email_history ||= mock_model(EmailHistory, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all email_histories as @email_histories" do
      EmailHistory.stub(:all) { [mock_email_history] }
      get :index
      assigns(:email_histories).should eq([mock_email_history])
    end
  end

  describe "GET show" do
    it "assigns the requested email_history as @email_history" do
      EmailHistory.stub(:find).with("37") { mock_email_history }
      get :show, :id => "37"
      assigns(:email_history).should be(mock_email_history)
    end
  end

  describe "GET new" do
    it "assigns a new email_history as @email_history" do
      EmailHistory.stub(:new) { mock_email_history }
      get :new
      assigns(:email_history).should be(mock_email_history)
    end
  end

  describe "GET edit" do
    it "assigns the requested email_history as @email_history" do
      EmailHistory.stub(:find).with("37") { mock_email_history }
      get :edit, :id => "37"
      assigns(:email_history).should be(mock_email_history)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created email_history as @email_history" do
        EmailHistory.stub(:new).with({'these' => 'params'}) { mock_email_history(:save => true) }
        post :create, :email_history => {'these' => 'params'}
        assigns(:email_history).should be(mock_email_history)
      end

      it "redirects to the created email_history" do
        EmailHistory.stub(:new) { mock_email_history(:save => true) }
        post :create, :email_history => {}
        response.should redirect_to(email_history_url(mock_email_history))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved email_history as @email_history" do
        EmailHistory.stub(:new).with({'these' => 'params'}) { mock_email_history(:save => false) }
        post :create, :email_history => {'these' => 'params'}
        assigns(:email_history).should be(mock_email_history)
      end

      it "re-renders the 'new' template" do
        EmailHistory.stub(:new) { mock_email_history(:save => false) }
        post :create, :email_history => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested email_history" do
        EmailHistory.stub(:find).with("37") { mock_email_history }
        mock_email_history.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :email_history => {'these' => 'params'}
      end

      it "assigns the requested email_history as @email_history" do
        EmailHistory.stub(:find) { mock_email_history(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:email_history).should be(mock_email_history)
      end

      it "redirects to the email_history" do
        EmailHistory.stub(:find) { mock_email_history(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(email_history_url(mock_email_history))
      end
    end

    describe "with invalid params" do
      it "assigns the email_history as @email_history" do
        EmailHistory.stub(:find) { mock_email_history(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:email_history).should be(mock_email_history)
      end

      it "re-renders the 'edit' template" do
        EmailHistory.stub(:find) { mock_email_history(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested email_history" do
      EmailHistory.stub(:find).with("37") { mock_email_history }
      mock_email_history.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the email_histories list" do
      EmailHistory.stub(:find) { mock_email_history }
      delete :destroy, :id => "1"
      response.should redirect_to(email_histories_url)
    end
  end

end
