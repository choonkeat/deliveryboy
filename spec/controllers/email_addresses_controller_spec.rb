require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EmailAddressesController do

  def mock_email_address(stubs={})
    @mock_email_address ||= mock_model(EmailAddress, stubs).as_null_object
  end

  describe "GET show" do
    it "assigns the requested email_address as @email_address" do
      EmailAddress.stub(:find).with("37") { mock_email_address }
      get :show, :id => "37"
      assigns(:email_address).should be(mock_email_address)
    end
  end

  describe "GET new" do
    it "assigns a new email_address as @email_address" do
      EmailAddress.stub(:new) { mock_email_address }
      get :new
      assigns(:email_address).should be(mock_email_address)
    end
  end

  describe "GET edit" do
    it "assigns the requested email_address as @email_address" do
      EmailAddress.stub(:find).with("37") { mock_email_address }
      get :edit, :id => "37"
      assigns(:email_address).should be(mock_email_address)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created email_address as @email_address" do
        EmailAddress.stub(:new).with({'these' => 'params'}) { mock_email_address(:save => true) }
        post :create, :email_address => {'these' => 'params'}
        assigns(:email_address).should be(mock_email_address)
      end

      it "redirects to the created email_address" do
        EmailAddress.stub(:new) { mock_email_address(:save => true) }
        post :create, :email_address => {}
        response.should redirect_to(email_address_url(mock_email_address))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved email_address as @email_address" do
        EmailAddress.stub(:new).with({'these' => 'params'}) { mock_email_address(:save => false) }
        post :create, :email_address => {'these' => 'params'}
        assigns(:email_address).should be(mock_email_address)
      end

      it "re-renders the 'new' template" do
        EmailAddress.stub(:new) { mock_email_address(:save => false) }
        post :create, :email_address => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested email_address" do
        EmailAddress.stub(:find).with("37") { mock_email_address }
        mock_email_address.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :email_address => {'these' => 'params'}
      end

      it "assigns the requested email_address as @email_address" do
        EmailAddress.stub(:find) { mock_email_address(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:email_address).should be(mock_email_address)
      end

      it "redirects to the email_address" do
        EmailAddress.stub(:find) { mock_email_address(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(email_address_url(mock_email_address))
      end
    end

    describe "with invalid params" do
      it "assigns the email_address as @email_address" do
        EmailAddress.stub(:find) { mock_email_address(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:email_address).should be(mock_email_address)
      end

      it "re-renders the 'edit' template" do
        EmailAddress.stub(:find) { mock_email_address(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested email_address" do
      EmailAddress.stub(:find).with("37") { mock_email_address }
      mock_email_address.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the email_addresses list" do
      EmailAddress.stub(:find) { mock_email_address }
      delete :destroy, :id => "1"
      response.should redirect_to(email_addresses_url)
    end
  end

end
